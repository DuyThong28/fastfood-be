// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  phone        String?  @default("")
  name         String
  gender       Gender
  avatarUrl    String   @map("avatar_url")
  birthDate    DateTime @map("birth_date")
  address      String   @default("")
  role         UserRole @default(USER)
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?  @map("created_by")
  updatedBy    String?  @map("updated_by")
  isActive     Boolean  @map("is_active")
  Cart         Cart[]
  Order        Order[]
  Review       Review[]

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  image     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")
  isActive  Boolean  @map("is_active")

  @@map("categories")
}

model Food {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")
  isActive  Boolean  @map("is_active")
  Review    Review[]

  @@map("foods")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique @map("user_id")
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  createdBy String?    @map("created_by")
  updatedBy String?    @map("updated_by")
  isActive  Boolean    @map("is_active")

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")
  isActive  Boolean  @map("is_active")
  cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?

  @@map("cart_items")
}

model Order {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  status    OrderStatus
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  createdBy String?     @map("created_by")
  updatedBy String?     @map("updated_by")
  isActive  Boolean     @map("is_active")
  OrderItem OrderItem[]
  Review    Review[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")
  isActive  Boolean  @map("is_active")

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  foodId    String   @map("food_id")
  food      Food     @relation(fields: [foodId], references: [id])
  rating    Int
  comment   String
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy String?  @map("created_by")
  updatedBy String?  @map("updated_by")
  isActive  Boolean  @map("is_active")

  @@map("reviews")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}
